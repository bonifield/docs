#====================
# Bro Cutting
#====================
Find what fields are in a log
head file.log | grep -P '^#fields' | sed -e 's/\t\+/ /g'

zeek -Cr file.pcap (generates the logs)
zeek-cut -d field1 field2 < somefile.log
- omit specific fields to cut all
- < means slurp from file; cat then pipe into zeek-cut for wildcard filenames
- -d is human-readable timestamp (ts) field

Create various data exports with bro-cut
Make simple CSV:
bro-cut somefile.log | tr '\t' ','

Make CSV with column names:
head somefile.log | grep -P '^#fields' | tr '\t' ',' | sed -e 's/#fields,//g' > somefile.log.csv
zeek-cut somefile.log | sed -e 's/\t\+/,/g' >> somefile.log.csv
(sometimes you may need a different delimeter, when commas may be a value in a log field)

Enable Heartbleed, SMB, and VLAN Logging:
Uncomment the following lines in /opt/bro/share/bro/site/local.bro (should be at or near the bottom):
@load policy/protocols/ssl/heartbleed
@load policy/protocols/smb
@load policy/protocoles/conn/vlan-logging


#====================
# Common Fields
# https://www.bro.org/sphinx/script-reference/log-files.html
#====================
conn.log
ts uid id.orig_h id.orig_p id.resp_h id.resp_p proto service duration orig_bytes resp_bytes conn_state local_orig local_resp missed_bytes history orig_pkts orig_ip_bytes resp_pkts resp_ip_bytes tunnel_parents

dns.log
ts uid id.orig_h id.orig_p id.resp_h id.resp_p proto trans_id rtt query qclass qclass_name qtype qtype_name rcode rcode_name AA TC RD RA Z answers TTLs rejected

files.log
ts fuid tx_hosts rx_hosts conn_uids source depth analyzers mime_type filename duration local_orig is_orig seen_bytes total_bytes missing_bytes overflow_bytes timedout parent_fuid md5 sha1 sha256 extracted

http.log
ts uid id.orig_h id.orig_p id.resp_h id.resp_p trans_depth method host uri referrer version user_agent request_body_len response_body_len status_code status_msg info_code info_msg tags username password proxied orig_fuids orig_filenames orig_mime_types resp_fuids resp_filenames resp_mime_types

packet_filter.log
ts node filter init success

ssl.log
ts uid id.orig_h id.orig_p id.resp_h id.resp_p version cipher curve server_name resumed last_alert next_protocol established cert_chain_fuids client_cert_chain_fuids subject issuer client_subject client_issuer

weird.log
ts uid id.orig_h id.orig_p id.resp_h id.resp_p name addl notice peer

x509.log
ts id certificate.version certificate.serial certificate.subject certificate.issuer certificate.not_valid_before certificate.not_valid_after certificate.key_alg certificate.sig_alg certificate.key_type certificate.key_length certificate.exponent certificate.curve san.dns san.uri san.email san.ip basic_constraints.ca basic_constraints.path_len


#====================
# conn.log history field
# https://www.bro.org/sphinx/scripts/base/protocols/conn/main.bro.html#type-Conn::Info
#====================
Letter 	Meaning
s 	a SYN w/o the ACK bit set
h 	a SYN+ACK (“handshake”)
a 	a pure ACK
d 	packet with payload (“data”)
f 	packet with FIN bit set
r 	packet with RST bit set
c 	packet with a bad checksum
t 	packet with retransmitted payload
i 	inconsistent packet (e.g. FIN+RST bits set)
q 	multi-flag packet (SYN+FIN or SYN+RST bits set)
^ 	connection direction was flipped by Bro’s heuristic

If the event comes from the originator, the letter is in upper-case; if it comes from the responder, it’s in lower-case.
Multiple packets of the same type will only be noted once
(e.g. we only record one “d” in each direction, regardless of how many data packets were seen.).


#====================
# conn.log conn_state field
# https://www.bro.org/sphinx/scripts/base/protocols/conn/main.bro.html#type-Conn::Info
#====================
conn_state 	Meaning
S0	Connection attempt seen, no reply.
S1 	Connection established, not terminated.
SF 	Normal establishment and termination. Note that this is the same symbol as for state S1. You can tell the two apart because for S1 there will not be any byte counts in the summary, while for SF there will be.
REJ 	Connection attempt rejected.
S2 	Connection established and close attempt by originator seen (but no reply from responder).
S3 	Connection established and close attempt by responder seen (but no reply from originator).
RSTO 	Connection established, originator aborted (sent a RST).
RSTR 	Responder sent a RST.
RSTOS0 	Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder.
RSTRH 	Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator.
SH 	Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was “half” open).
SHR 	Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator.
OTH 	No SYN seen, just midstream traffic (a “partial connection” that was not later closed).


Clean install notes for Ubuntu 16.04
https://www.digitalocean.com/community/tutorials/how-to-install-bro-on-ubuntu-16-04

#=============
# 1 - install dependencies
#=============
sudo apt-get update
sudo apt-get install bison cmake flex g++ gdb make libmagic-dev libpcap-dev libgeoip-dev libssl-dev python-dev swig2.0 zlib1g-dev

#=============
# 2 - geodata
#=============
wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCityv6-beta/GeoLiteCityv6.dat.gz
gzip -d GeoLiteCity.dat.gz
gzip -d GeoLiteCityv6.dat.gz
### put these files in /usr/share/GeoIP
sudo mv GeoLiteCity.dat /usr/share/GeoIP/GeoIPCity.dat
sudo mv GeoLiteCityv6.dat /usr/share/GeoIP/GeoIPCityv6.dat

#=============
# 3 - install bro from source
#=============
git clone --recursive git://git.bro.org/bro
cd bro
./configure
make
sudo make install
### installs to /usr/local/bro

#=============
# 4 - set environment variables and cronjob
#=============
sudo nano /etc/profile.d/bropath.sh
-------
#!/bin/bash
# Expand PATH to include the path to Bro's binaries
export PATH=$PATH:/usr/local/bro/bin
-------
source /etc/profile.d/bropath.sh
# note /usr/local/bro/bin - from git clone install
# note /opt/bro/bin - from binary package

### set cronjob to restart bro on crash, copy whole line into file
sudo nano /etc/cron.d/bro
*/5 * * * * root /usr/local/bro/bin/broctl cron
### runs every five mins

#=============
# 5 - deploy and use (use the full path and clean start/stop using broctl)
#=============
sudo /usr/local/bro/bin/broctl deploy
sudo /usr/local/bro/bin/broctl status
### sudo /usr/local/bro/bin/broctl stop
### sudo /usr/local/bro/bin/broctl start
### logs are recorded to:
/usr/local/bro/logs/current

#=============
# 6 - notes and misc
#=============
- logs that are stopped will be rolled into a daily folder, with a time-based name and *.log.gz format
- when logging is started again, new logs will appear in the "current" folder

scripts:
/usr/local/bro/share/bro/
site-specific scripts:
/usr/local/bro/share/bro/site/

#------
# Invoke on file or roll logs to a folder
#------
cd /your/path/logs
### dump logs to a folder
### roll every hour, day, etc by script or cronjob
sudo /usr/local/bro/bin/bro -Ci eth0
bro -Cr file.pcap

# broctl notes
/usr/local/bro/etc
broctl.cfg - main config file for bro control; set mail alerts, log rotation and location, other options
# default for LogRotationInterval is 3600 seconds, or 1 hour
# 1 day = 86400 seconds
networks.cfg - set your local network ip space (192, 10, etc)
node.cfg - interface and worker settings, for a standalone just set the interface and save
# set your listening interface in node.cfg
# if interface is not set (ie. eth0 is default, but you are in a vm and only have enp0s3),
# bro will not start and will crash out (won't wreck anything though)

#====================
# future use
#====================
